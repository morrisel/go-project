#!/bin/bash


#==================================================================================================#
#--------------------------------------------------------------------------------------------------#
#Команда `ssh-keygen -t rsa -b 4096 -C "your_email@example.com"` создает новый SSH-ключ RSA с длиной ключа 4096 бит. Опция `-C` позволяет добавить комментарий к ключу, в данном случае это будет ваш адрес электронной почты.
#
#Разберем команду по частям:
#
#* `ssh-keygen` - это программа для создания SSH-ключей.
#* `-t` - указывает тип ключа. В данном случае это RSA.
#* `rsa` - означает, что ключ будет создан с использованием алгоритма RSA.
#* `-b` - указывает длину ключа. В данном случае это 4096 бит.
#* `4096` - означает, что ключ будет иметь длину 4096 бит.
#* `-C` - указывает комментарий к ключу.
#* `"your_email@example.com"` - это комментарий к ключу. В данном случае это ваш адрес электронной почты.
#
#После выполнения этой команды в каталоге `~/.ssh` будут созданы два файла:
#
#* `id_rsa` - приватный ключ
#* `id_rsa.pub` - открытый ключ
#
#**Пример**
#
#Если ваш адрес электронной почты - `johndoe@example.com`, то после выполнения команды `ssh-keygen -t rsa -b 4096 -C "johndoe@example.com"` в каталоге `~/.ssh` будут созданы следующие файлы:
#
#```
#$ ls -la ~/.ssh
#total 12
#drwx------ 2 johndoe users 4096 Dec 11 22:59 .
#drwxr-xr-x 3 root root 4096 Dec 11 22:59 ..
#-rw------- 1 johndoe users 377 Dec 11 22:59 id_rsa
#-rw-r--r-- 1 johndoe users 707 Dec 11 22:59 id_rsa.pub
#```
#
#Чтобы подключиться к серверу по SSH, используя созданный ключ, необходимо добавить открытый ключ в файл `authorized_keys` на сервере.
#--------------------------------------------------------------------------------------------------#
# RUN SCRIPT
# ----------
echo 'ssh-keygen -t rsa -b 4096 -C morris.elkanaev@gmail.com'
echo "======================================================"
echo ssh-keygen -t rsa -b 4096 -C morris.elkanaev@gmail.com
echo "------------------------------------------------------"
ssh-keygen -t rsa -b 4096 -C morris.elkanaev@gmail.com

# RAW INFORMATION
# ---------------
#Самый мощный алгоритм из приведенных - это **Ed25519**. Он обеспечивает сопоставимый уровень безопасности с RSA, но при этом имеет более короткий ключ (256 бит против 4096 бит у RSA). Это делает его более компактным и более эффективным с точки зрения вычислительных ресурсов.
#
#Алгоритм Ed25519 основан на кривой Эдвардса, которая является более сложной, чем эллиптические кривые, используемые в алгоритмах DSA и ECDSA. Это делает его более устойчивым к атакам.
#
#В настоящее время алгоритм Ed25519 поддерживается большинством современных SSH-клиентов и серверов. Он рекомендуется для использования в новых приложениях, а также для обновления существующих приложений, использующих другие алгоритмы.
#
#Вот сравнение основных характеристик приведенных алгоритмов:
#
#| Алгоритм | Длина ключа   | Безопасность  | Сложность реализации | Скорость  | Компактность |
#|----------|---------------|---------------|----------------------|-----------|--------------|
#| RSA      | 2048-4096 бит | Высокая       | Средняя              | Медленная | Большая      |
#| DSA      | 1024-2048 бит | Очень высокая | Высокая              | Медленная | Большая      |
#| ECDSA    | 256-521 бит   | Высокая       | Средняя              | Быстрая   | Компактная   |
#| Ed25519  | 256 бит       | Высокая       | Высокая              | Быстрая   | Компактная   |





#==================================================================================================#
#--------------------------------------------------------------------------------------------------#
#Команда `eval "$(ssh-agent -s)"` запускает агент SSH и устанавливает переменные среды, необходимые для использования агента.
#
#Команда `ssh-agent -s` запускает агент SSH в фоновом режиме. Агент SSH - это процесс, который хранит SSH-ключи в памяти. Это позволяет использовать SSH-ключи без необходимости каждый раз вводить пароль к приватному ключу.
#
#Команда `eval "$(ssh-agent -s)"` использует команду `eval`, чтобы выполнить вывод команды `ssh-agent -s`. Это устанавливает переменные среды, необходимые для использования агента.
#
#Конкретно, команда `eval "$(ssh-agent -s)"` устанавливает следующие переменные среды:
#
#* `SSH_AUTH_SOCK` - это путь к сокету, используемому агентом SSH.
#* `SSH_AGENT_PID` - это идентификатор процесса, используемого агентом SSH.
#* `SSH_AGENT_AUTH` - это список SSH-ключей, хранящихся в агенте.
#
#После выполнения команды `eval "$(ssh-agent -s)"` вы можете использовать SSH-ключи, не вводя пароль к приватному ключу. Для этого необходимо добавить ключ в агент с помощью команды `ssh-add`.
#
#Вот пример использования команды `eval "$(ssh-agent -s)"`:
#
#```
#$ eval "$(ssh-agent -s)"
#$ ssh-add ~/.ssh/id_rsa
#```
#
#Эта команда запускает агент SSH, устанавливает переменные среды, необходимые для использования агента, и добавляет ключ `id_rsa` в агент. После этого вы можете подключаться к серверам по SSH, используя ключ `id_rsa`, не вводя пароль.
#
#Вместо команды `eval "$(ssh-agent -s)"` можно также использовать команду `ssh-agent`. Однако в этом случае вам необходимо будет вручную установить переменные среды, необходимые для использования агента.
#--------------------------------------------------------------------------------------------------#
# RUN SCRIPT
# ----------
echo 'eval "$(ssh-agent -s)"'
echo "======================"
echo "----------------------"
echo eval "$(ssh-agent -s)"
echo "----------------------"
eval "$(ssh-agent -s)"




#==================================================================================================#
#--------------------------------------------------------------------------------------------------#
#Команда `ssh-add ~/.ssh/id_rsa` добавляет ключ `id_rsa` в агент SSH.
#
#Агент SSH - это процесс, который хранит SSH-ключи в памяти. Это позволяет использовать SSH-ключи без необходимости каждый раз вводить пароль к приватному ключу.
#
#Команда `ssh-add ~/.ssh/id_rsa` выполняет следующие действия:
#
#1. Проверяет, запущен ли агент SSH. Если агент SSH не запущен, то команда запускает его.
#2. Добавляет ключ `id_rsa` в агент SSH.
#3. Выводит информацию о добавленном ключе.
#
#Вот пример использования команды `ssh-add ~/.ssh/id_rsa`:
#
#```
#$ ssh-add ~/.ssh/id_rsa
#
#Identity added: /home/user/.ssh/id_rsa (/home/user/.ssh/id_rsa)
#```
#
#После выполнения этой команды вы можете подключаться к серверам по SSH, используя ключ `id_rsa`, не вводя пароль.
#
#Если вы хотите добавить несколько ключей в агент SSH, то вы можете указать несколько файлов ключей в качестве аргументов команды `ssh-add`. Например, чтобы добавить ключи `id_rsa` и `id_rsa2` в агент SSH, вы можете использовать следующую команду:
#
#```
#$ ssh-add ~/.ssh/id_rsa ~/.ssh/id_rsa2
#```
#
#Чтобы удалить ключ из агента SSH, вы можете использовать команду `ssh-add -d`. Например, чтобы удалить ключ `id_rsa` из агента SSH, вы можете использовать следующую команду:
#
#```
#$ ssh-add -d ~/.ssh/id_rsa
#```
#--------------------------------------------------------------------------------------------------#
# RUN SCRIPT
# ----------
echo 'ssh-add ~/.ssh/id_rsa'
echo "====================="
echo "---------------------"
echo ssh-add ~/.ssh/id_rsa
echo "---------------------"
ssh-add ~/.ssh/id_rsa



